Index: app/src/main/java/com/app/theshineindia/intruder_selfie/CameraService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+> package com.app.theshineindia.intruder_selfie;\r\n\r\nimport android.annotation.SuppressLint;\r\nimport android.app.Notification;\r\nimport android.app.NotificationChannel;\r\nimport android.app.NotificationManager;\r\nimport android.app.Service;\r\nimport android.content.Context;\r\nimport android.content.Intent;\r\nimport android.content.SharedPreferences;\r\nimport android.content.pm.PackageManager;\r\nimport android.content.pm.ServiceInfo;\r\nimport android.graphics.Bitmap;\r\nimport android.graphics.BitmapFactory;\r\nimport android.graphics.PixelFormat;\r\nimport android.hardware.Camera;\r\nimport android.media.MediaScannerConnection;\r\nimport android.net.Uri;\r\nimport android.os.AsyncTask;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Environment;\r\nimport android.os.Handler;\r\nimport android.os.IBinder;\r\nimport android.os.Looper;\r\nimport android.os.Message;\r\nimport android.util.Log;\r\nimport android.view.Gravity;\r\nimport android.view.SurfaceHolder;\r\nimport android.view.SurfaceView;\r\nimport android.view.WindowManager;\r\nimport android.widget.Toast;\r\n\r\nimport androidx.annotation.NonNull;\r\nimport androidx.core.app.NotificationCompat;\r\nimport androidx.localbroadcastmanager.content.LocalBroadcastManager;\r\n\r\nimport com.app.theshineindia.baseclasses.SharedMethods;\r\nimport com.app.theshineindia.utils.AppData;\r\n\r\nimport java.io.ByteArrayOutputStream;\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.FileOutputStream;\r\nimport java.io.IOException;\r\nimport java.text.SimpleDateFormat;\r\n\r\npublic class CameraService extends Service implements SurfaceHolder.Callback {\r\n\r\n    public Intent cameraIntent;\r\n    FileOutputStream fo;\r\n    SurfaceView sv;\r\n    WindowManager.LayoutParams params;\r\n    SharedPreferences pref;\r\n    SharedPreferences.Editor editor;\r\n    int width = 0, height = 0;\r\n    Handler handler = new Handler();\r\n    // Camera variables\r\n    // a surface holder\r\n    // a variable to control the camera\r\n    private Camera mCamera;\r\n    // the camera parameters\r\n    private Camera.Parameters parameters;\r\n    private Bitmap bmp;\r\n    private String FLASH_MODE;\r\n    private int QUALITY_MODE = 0;\r\n    Camera.PictureCallback mCall = new Camera.PictureCallback() {\r\n\r\n        @Override\r\n        public void onPictureTaken(byte[] data, Camera camera) {\r\n            // decode the data obtained by the camera into a Bitmap\r\n            Log.e(\"ImageTakin\", \"Done\");\r\n            mCamera.stopPreview();\r\n            mCamera.release();\r\n            if (bmp != null)\r\n                bmp.recycle();\r\n            System.gc();\r\n            bmp = decodeBitmap(data);\r\n\r\n            bmp = SharedMethods.RotateBitmap(bmp, -90);\r\n\r\n            ByteArrayOutputStream bytes = new ByteArrayOutputStream();\r\n            if (bmp != null && QUALITY_MODE == 0)\r\n                bmp.compress(Bitmap.CompressFormat.JPEG, 50, bytes);\r\n            else if (bmp != null && QUALITY_MODE != 0)\r\n                bmp.compress(Bitmap.CompressFormat.JPEG, QUALITY_MODE, bytes);\r\n\r\n            /*File imagesFolder = new File(Environment.getExternalStorageDirectory(), AppData.folder_name);\r\n            if (!imagesFolder.exists()) {\r\n                imagesFolder.mkdirs(); // <----\r\n            }\r\n\r\n\r\n            File image = new File(imagesFolder, System.currentTimeMillis() + \".jpg\");\r\n\r\n            //File image = new File(imagesFolder, \"intruder.jpg\");\r\n\r\n            // write the bytes in file\r\n            try {\r\n                fo = new FileOutputStream(imagesFolder + \"/user\" + System.currentTimeMillis() + \".jpg\");;\r\n            } catch (FileNotFoundException e) {\r\n                Log.e(\"TAG\", \"FileNotFoundException\", e);\r\n                // TODO Auto-generated catch block\r\n            }\r\n            try {\r\n                fo.write(bytes.toByteArray());\r\n            } catch (IOException e) {\r\n                Log.e(\"TAG\", \"fo.write::PictureTaken\", e);\r\n                // TODO Auto-generated catch block\r\n            }*/\r\n\r\n/*\r\n            File myDirectory = new File(Environment.getExternalStorageDirectory() + \"/Test\");\r\n            // have the object build the directory structure, if needed.\r\n            myDirectory.mkdirs();\r\n\r\n            //SDF for getting current time for unique image name\r\n            SimpleDateFormat curTimeFormat = new SimpleDateFormat(\"ddMMyyyyhhmmss\");\r\n            String curTime = curTimeFormat.format(new java.util.Date());\r\n\r\n            // create a File object for the output file\r\n            try {\r\n                fo = new FileOutputStream(myDirectory + \"/user\" + curTime + \".jpg\");\r\n                fo.write(bytes.toByteArray());\r\n                fo.close();\r\n                Log.e(\"123\", \"file wrote eueueuue \" + myDirectory.getPath());\r\n            } catch (FileNotFoundException e) {\r\n                e.printStackTrace();\r\n            } catch (IOException e) {\r\n                e.printStackTrace();\r\n            }*/\r\n\r\n           // String root = getExternalFilesDir(null).toString();\r\n            String root = Environment.getExternalStorageDirectory().toString();\r\n\r\n            File myDir = new File(root + \"/\" + AppData.folder_name);\r\n            if (!myDir.exists()) {\r\n                myDir.mkdirs();\r\n            }\r\n            String filename = System.currentTimeMillis() + \".jpg\";\r\n            File file = new File(myDir, filename);\r\n            try {\r\n                Log.e(\"123\", \"inside try\");\r\n                file.createNewFile();\r\n                FileOutputStream out = new FileOutputStream(file);\r\n                bmp.compress(Bitmap.CompressFormat.JPEG, 90, out);\r\n                out.flush();\r\n                out.close();\r\n                Log.e(\"123\", \"Saved captured image\");\r\n            } catch (Exception e) {\r\n                Log.e(\"123\", \"inside exception\" + e.getMessage());\r\n                e.printStackTrace();\r\n            }\r\n            if (bmp != null) {\r\n                // SEND INTRUDER LOCATION AND IMAGE TO ADMIN\r\n                String image_str = SharedMethods.convertToString(bmp);\r\n                if (image_str != null)\r\n                   // new IntruderSelfiePresenter(getApplicationContext()).requestUploadSelfie(image_str);\r\n                    new IntruderSelfiePresenter(getApplicationContext()).requestUploadSelfie2(image_str, file);\r\n                //new IntruderSelfiePresenter(getApplicationContext()).prepareWorkManagerForSelfie();\r\n\r\n                bmp.recycle();\r\n                bmp = null;\r\n                System.gc();\r\n            }\r\n\r\n\r\n            // remember close de FileOutput\r\n            /*try {\r\n                fo.close();\r\n                if (Build.VERSION.SDK_INT < 19)\r\n                    sendBroadcast(new Intent(\r\n                            Intent.ACTION_MEDIA_MOUNTED,\r\n                            Uri.parse(\"file://\" + Environment.getExternalStorageDirectory())));\r\n                else {\r\n                    MediaScannerConnection\r\n                            .scanFile(\r\n                                    getApplicationContext(),\r\n                                    new String[]{image.toString()},\r\n                                    null,\r\n                                    new MediaScannerConnection.OnScanCompletedListener() {\r\n                                        public void onScanCompleted(String path, Uri uri) {\r\n                                            Log.i(\"ExternalStorage\", \"Scanned \" + path + \":\");\r\n                                            Log.i(\"ExternalStorage\", \"-> uri=\" + uri);\r\n                                        }\r\n                                    });\r\n                }\r\n\r\n            } catch (IOException e) {\r\n                // TODO Auto-generated catch block\r\n                e.printStackTrace();\r\n            }\r\n            if (mCamera != null) {\r\n                mCamera.stopPreview();\r\n                mCamera.release();\r\n                mCamera = null;\r\n            }\r\n            *//*\r\n             * Toast.makeText(getApplicationContext(),\r\n             * \"Your Picture has been taken !\", Toast.LENGTH_LONG).show();\r\n             *//*\r\n            Log.e(\"Camera\", \"Image Taken !\");\r\n//            if (bmp != null) {\r\n//                bmp.recycle();\r\n//                bmp = null;\r\n//                System.gc();\r\n//            }\r\n\r\n            if (bmp != null) {\r\n                // SEND INTRUDER LOCATION AND IMAGE TO ADMIN\r\n                String image_str = SharedMethods.convertToString(bmp);\r\n                if (image_str != null)\r\n                    //     new IntruderSelfiePresenter(getApplicationContext()).requestUploadSelfie(image_str);\r\n                    new IntruderSelfiePresenter(getApplicationContext()).requestUploadSelfie2(image_str, image);\r\n                //new IntruderSelfiePresenter(getApplicationContext()).prepareWorkManagerForSelfie();\r\n\r\n                bmp.recycle();\r\n                bmp = null;\r\n                System.gc();\r\n            }\r\n\r\n            mCamera = null;\r\n//            handler.post(new Runnable() {\r\n//                @Override\r\n//                public void run() {\r\n//                    Toast.makeText(getApplicationContext(), \"Your Picture has been taken !\", Toast.LENGTH_SHORT).show();\r\n//                }\r\n//            });\r\n\r\n            Log.e(\"1111\", \"Your Picture has been taken !\");\r\n            stopSelf();\r\n        }*/\r\n        }\r\n    };\r\n    private boolean isFrontCamRequest = false;\r\n    private Camera.Size pictureSize;\r\n    private SurfaceHolder sHolder;\r\n    private WindowManager windowManager;\r\n\r\n    public static Camera getCameraInstance() {\r\n        Camera c = null;\r\n        try {\r\n            c = Camera.open(); // attempt to get a Camera instance\r\n        } catch (Exception e) {\r\n            // Camera is not available (in use or does not exist)\r\n        }\r\n        return c; // returns null if camera is unavailable\r\n    }\r\n\r\n    public static Bitmap decodeBitmap(byte[] data) {\r\n\r\n        Bitmap bitmap = null;\r\n        BitmapFactory.Options bfOptions = new BitmapFactory.Options();\r\n        bfOptions.inDither = false; // Disable Dithering mode\r\n        bfOptions.inPurgeable = true; // Tell to gc that whether it needs free\r\n        // memory, the Bitmap can be cleared\r\n        bfOptions.inInputShareable = true; // Which kind of reference will be\r\n        // used to recover the Bitmap data\r\n        // after being clear, when it will\r\n        // be used in the future\r\n        bfOptions.inTempStorage = new byte[32 * 1024];\r\n\r\n        if (data != null)\r\n            bitmap = BitmapFactory.decodeByteArray(data, 0, data.length,\r\n                    bfOptions);\r\n\r\n        return bitmap;\r\n    }\r\n\r\n    /**\r\n     * Called when the activity is first created.\r\n     */\r\n    @Override\r\n    public void onCreate() {\r\n        super.onCreate();\r\n\r\n        if (Build.VERSION.SDK_INT >= 26) {\r\n            String CHANNEL_ID = \"my_channel_01\";\r\n            NotificationChannel channel = new NotificationChannel(CHANNEL_ID,\r\n                    \"The Shine India\",\r\n                    NotificationManager.IMPORTANCE_DEFAULT);\r\n            ((NotificationManager) getSystemService(Context.NOTIFICATION_SERVICE)).createNotificationChannel(channel);\r\n\r\n            Notification notification = new NotificationCompat.Builder(this, CHANNEL_ID)\r\n                    .setContentTitle(\"\")\r\n                    .setContentText(\"\").build();\r\n               if(android.os.Build.VERSION.SDK_INT <= Build.VERSION_CODES.P){\r\n                   startForeground(1, notification);\r\n                   System.out.println(\"piyush yadav in \");\r\n               }\r\n               else\r\n            startForeground(1, notification, ServiceInfo.FOREGROUND_SERVICE_TYPE_CAMERA);\r\n        }\r\n\r\n    }\r\n\r\n    private Camera openFrontFacingCameraGingerbread() {\r\n\r\n        int cameraCount = 0;\r\n        Camera cam = null;\r\n        Camera.CameraInfo cameraInfo = new Camera.CameraInfo();\r\n        cameraCount = Camera.getNumberOfCameras();\r\n        for (int camIdx = 0; camIdx < cameraCount; camIdx++) {\r\n            Camera.getCameraInfo(camIdx, cameraInfo);\r\n            if (cameraInfo.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {\r\n                try {\r\n                    cam = Camera.open(camIdx);\r\n                } catch (RuntimeException e) {\r\n                    Log.e(\"Camera\",\r\n                            \"Camera failed to open: \" + e.getLocalizedMessage());\r\n                    /*\r\n                     * Toast.makeText(getApplicationContext(),\r\n                     * \"Front Camera failed to open\", Toast.LENGTH_LONG)\r\n                     * .show();\r\n                     */\r\n                }\r\n            }\r\n        }\r\n        return cam;\r\n\r\n\r\n    }\r\n\r\n    private void setBesttPictureResolution() {\r\n        // get biggest picture size\r\n        width = pref.getInt(\"Picture_Width\", 0);\r\n        height = pref.getInt(\"Picture_height\", 0);\r\n\r\n        if (width == 0 | height == 0) {\r\n            pictureSize = getBiggesttPictureSize(parameters);\r\n            if (pictureSize != null)\r\n                parameters\r\n                        .setPictureSize(pictureSize.width, pictureSize.height);\r\n            // save width and height in sharedprefrences\r\n            width = pictureSize.width;\r\n            height = pictureSize.height;\r\n            editor.putInt(\"Picture_Width\", width);\r\n            editor.putInt(\"Picture_height\", height);\r\n            editor.commit();\r\n\r\n        } else {\r\n            // if (pictureSize != null)\r\n            parameters.setPictureSize(width, height);\r\n        }\r\n    }\r\n\r\n    private Camera.Size getBiggesttPictureSize(Camera.Parameters parameters) {\r\n        Camera.Size result = null;\r\n\r\n        for (Camera.Size size : parameters.getSupportedPictureSizes()) {\r\n            if (result == null) {\r\n                result = size;\r\n            } else {\r\n                int resultArea = result.width * result.height;\r\n                int newArea = size.width * size.height;\r\n\r\n                if (newArea > resultArea) {\r\n                    result = size;\r\n                }\r\n            }\r\n        }\r\n\r\n        return (result);\r\n    }\r\n\r\n    /**\r\n     * Check if this device has a camera\r\n     */\r\n    private boolean checkCameraHardware(Context context) {\r\n        if (context.getPackageManager().hasSystemFeature(\r\n                PackageManager.FEATURE_CAMERA)) {\r\n            // this device has a camera\r\n            return true;\r\n        } else {\r\n            // no camera on this device\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if this device has front camera\r\n     */\r\n    private boolean checkFrontCamera(Context context) {\r\n        if (context.getPackageManager().hasSystemFeature(\r\n                PackageManager.FEATURE_CAMERA_FRONT)) {\r\n            // this device has front camera\r\n            return true;\r\n        } else {\r\n            // no front camera on this device\r\n            return false;\r\n        }\r\n    }\r\n\r\n    @SuppressLint(\"HandlerLeak\")\r\n    private synchronized void takeImage(Intent intent) {\r\n\r\n        if (checkCameraHardware(getApplicationContext())) {\r\n            Bundle extras = intent.getExtras();\r\n            if (extras != null) {\r\n                String flash_mode = extras.getString(\"FLASH\");\r\n                FLASH_MODE = flash_mode;\r\n\r\n                boolean front_cam_req = extras.getBoolean(\"Front_Request\");\r\n                isFrontCamRequest = front_cam_req;\r\n\r\n                int quality_mode = extras.getInt(\"Quality_Mode\");\r\n                QUALITY_MODE = quality_mode;\r\n            }\r\n\r\n            if (isFrontCamRequest) {\r\n\r\n                // set flash 0ff\r\n                FLASH_MODE = \"off\";\r\n                // only for gingerbread and newer versions\r\n                if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.GINGERBREAD) {\r\n\r\n                    mCamera = openFrontFacingCameraGingerbread();\r\n                    if (mCamera != null) {\r\n\r\n                        try {\r\n                            mCamera.setPreviewDisplay(sv.getHolder());\r\n                        } catch (IOException e) {\r\n                            Log.e(\"123\", e.getMessage());\r\n                            handler.post(new Runnable() {\r\n\r\n                                @Override\r\n                                public void run() {\r\n                                    Toast.makeText(getApplicationContext(),\r\n                                            \"API dosen't support front camera\",\r\n                                            Toast.LENGTH_LONG).show();\r\n                                }\r\n                            });\r\n\r\n                            stopSelf();\r\n                        }\r\n                        Camera.Parameters parameters = mCamera.getParameters();\r\n                        pictureSize = getBiggesttPictureSize(parameters);\r\n                        if (pictureSize != null)\r\n                            parameters.setPictureSize(pictureSize.width, pictureSize.height);\r\n\r\n                        // set camera parameters\r\n                        mCamera.setParameters(parameters);\r\n                        mCamera.startPreview();\r\n                        //mCamera.takePicture(null, null, mCall);\r\n\r\n                        new Handler(Looper.getMainLooper()) {\r\n                            @Override\r\n                            public void handleMessage(Message msg) {\r\n                                super.handleMessage(msg);\r\n                                mCamera.takePicture(null, null, mCall);\r\n                            }\r\n                        }.sendEmptyMessageDelayed(0, 500);\r\n\r\n                        // return 4;\r\n  \r\n                    } else {\r\n                        mCamera = null;\r\n                        handler.post(new Runnable() {\r\n\r\n                            @Override\r\n                            public void run() {\r\n                                Toast.makeText(\r\n                                        getApplicationContext(),\r\n                                        \"Your Device dosen't have Front Camera !\",\r\n                                        Toast.LENGTH_LONG).show();\r\n                            }\r\n                        });\r\n\r\n                        stopSelf();\r\n                    }\r\n                    /*\r\n                     * sHolder = sv.getHolder(); // tells Android that this\r\n                     * surface will have its data // constantly // replaced if\r\n                     * (Build.VERSION.SDK_INT < 11)\r\n                     *\r\n                     * sHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS)\r\n                     */\r\n                } else {\r\n                    if (checkFrontCamera(getApplicationContext())) {\r\n                        mCamera = openFrontFacingCameraGingerbread();\r\n\r\n                        if (mCamera != null) {\r\n\r\n                            try {\r\n                                mCamera.setPreviewDisplay(sv.getHolder());\r\n                            } catch (IOException e) {\r\n                                handler.post(new Runnable() {\r\n\r\n                                    @Override\r\n                                    public void run() {\r\n                                        Toast.makeText(\r\n                                                getApplicationContext(),\r\n                                                \"API dosen't support front camera\",\r\n                                                Toast.LENGTH_LONG).show();\r\n                                    }\r\n                                });\r\n\r\n                                stopSelf();\r\n                            }\r\n                            Camera.Parameters parameters = mCamera.getParameters();\r\n                            pictureSize = getBiggesttPictureSize(parameters);\r\n                            if (pictureSize != null)\r\n                                parameters\r\n                                        .setPictureSize(pictureSize.width, pictureSize.height);\r\n\r\n                            // set camera parameters\r\n                            mCamera.setParameters(parameters);\r\n                            mCamera.startPreview();\r\n                            //mCamera.takePicture(null, null, mCall);\r\n                            new Handler(Looper.getMainLooper()) {\r\n                                @Override\r\n                                public void handleMessage(Message msg) {\r\n                                    super.handleMessage(msg);\r\n                                    mCamera.takePicture(null, null, mCall);\r\n                                }\r\n                            }.sendEmptyMessageDelayed(0, 500);\r\n                            // return 4;\r\n\r\n                        } else {\r\n                            mCamera = null;\r\n                            /*\r\n                             * Toast.makeText(getApplicationContext(),\r\n                             * \"API dosen't support front camera\",\r\n                             * Toast.LENGTH_LONG).show();\r\n                             */\r\n                            handler.post(new Runnable() {\r\n\r\n                                @Override\r\n                                public void run() {\r\n                                    Toast.makeText(\r\n                                            getApplicationContext(),\r\n                                            \"Your Device dosen't have Front Camera !\",\r\n                                            Toast.LENGTH_LONG).show();\r\n\r\n                                }\r\n                            });\r\n\r\n                            stopSelf();\r\n\r\n                        }\r\n                        // Get a surface\r\n                        /*\r\n                         * sHolder = sv.getHolder(); // tells Android that this\r\n                         * surface will have its data // constantly // replaced\r\n                         * if (Build.VERSION.SDK_INT < 11)\r\n                         *\r\n                         * sHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS\r\n                         * );\r\n                         */\r\n                    }\r\n\r\n                }\r\n\r\n            } else {\r\n\r\n                if (mCamera != null) {\r\n                    mCamera.stopPreview();\r\n                    mCamera.release();\r\n                    mCamera = Camera.open();\r\n                } else\r\n                    mCamera = getCameraInstance();\r\n\r\n                try {\r\n                    if (mCamera != null) {\r\n                        mCamera.setPreviewDisplay(sv.getHolder());\r\n                        parameters = mCamera.getParameters();\r\n                        if (FLASH_MODE == null || FLASH_MODE.isEmpty()) {\r\n                            FLASH_MODE = \"auto\";\r\n                        }\r\n                        parameters.setFlashMode(FLASH_MODE);\r\n                        // set biggest picture\r\n                        setBesttPictureResolution();\r\n                        // log quality and image format\r\n                        Log.e(\"Qaulity\", parameters.getJpegQuality() + \"\");\r\n                        Log.e(\"Format\", parameters.getPictureFormat() + \"\");\r\n\r\n                        // set camera parameters\r\n                        mCamera.setParameters(parameters);\r\n                        mCamera.startPreview();\r\n                        Log.e(\"ImageTakin\", \"OnTake()\");\r\n                        mCamera.stopPreview();\r\n                        mCamera.release();\r\n                        //mCamera.takePicture(null, null, mCall);\r\n                        new Handler(Looper.getMainLooper()) {\r\n                            @Override\r\n                            public void handleMessage(Message msg) {\r\n                                super.handleMessage(msg);\r\n                                mCamera.takePicture(null, null, mCall);\r\n                            }\r\n                        }.sendEmptyMessageDelayed(0, 500);\r\n\r\n                    } else {\r\n                        handler.post(new Runnable() {\r\n\r\n                            @Override\r\n                            public void run() {\r\n                                Toast.makeText(getApplicationContext(),\r\n                                        \"Camera is unavailable !\",\r\n                                        Toast.LENGTH_LONG).show();\r\n                            }\r\n                        });\r\n\r\n                    }\r\n                    // return 4;\r\n\r\n                } catch (IOException e) {\r\n                    // TODO Auto-generated catch block\r\n                    Log.e(\"TAG\", \"CmaraHeadService()::takePicture\", e);\r\n                }\r\n                // Get a surface\r\n                /*\r\n                 * sHolder = sv.getHolder(); // tells Android that this surface\r\n                 * will have its data constantly // replaced if\r\n                 * (Build.VERSION.SDK_INT < 11)\r\n                 *\r\n                 * sHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);\r\n                 */\r\n\r\n            }\r\n\r\n        } else {\r\n            // display in long period of time\r\n            /*\r\n             * Toast.makeText(getApplicationContext(),\r\n             * \"Your Device dosen't have a Camera !\", Toast.LENGTH_LONG)\r\n             * .show();\r\n             */\r\n            handler.post(new Runnable() {\r\n\r\n                @Override\r\n                public void run() {\r\n                    Toast.makeText(getApplicationContext(),\r\n                            \"Your Device dosen't have a Camera !\",\r\n                            Toast.LENGTH_LONG).show();\r\n                }\r\n            });\r\n            stopSelf();\r\n        }\r\n\r\n        // return super.onStartCommand(intent, flags, startId);\r\n\r\n    }\r\n\r\n    @SuppressWarnings(\"deprecation\")\r\n    @Override\r\n    public int onStartCommand(Intent intent, int flags, int startId) {\r\n        // sv = new SurfaceView(getApplicationContext());\r\n        cameraIntent = intent;\r\n        Log.e(\"ImageTakin\", \"StartCommand()\");\r\n        pref = getApplicationContext().getSharedPreferences(\"MyPref\", 0);\r\n        editor = pref.edit();\r\n\r\n        windowManager = (WindowManager) getSystemService(WINDOW_SERVICE);\r\n\r\n//        params = new WindowManager.LayoutParams(\r\n//                WindowManager.LayoutParams.WRAP_CONTENT,\r\n//                WindowManager.LayoutParams.WRAP_CONTENT,\r\n//                WindowManager.LayoutParams.TYPE_PHONE,\r\n//                WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,\r\n//                PixelFormat.TRANSLUCENT);\r\n\r\n        int LAYOUT_FLAG;\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            LAYOUT_FLAG = WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY;\r\n        } else {\r\n            LAYOUT_FLAG = WindowManager.LayoutParams.TYPE_PHONE;\r\n        }\r\n\r\n        params = new WindowManager.LayoutParams(\r\n                WindowManager.LayoutParams.WRAP_CONTENT,\r\n                WindowManager.LayoutParams.WRAP_CONTENT,\r\n                LAYOUT_FLAG,\r\n                WindowManager.LayoutParams.FLAG_NOT_TOUCHABLE | WindowManager.LayoutParams.FLAG_LAYOUT_IN_SCREEN | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE,\r\n                PixelFormat.TRANSLUCENT);\r\n\r\n        params.gravity = Gravity.TOP | Gravity.LEFT;\r\n        params.width = 1;\r\n        params.height = 1;\r\n        params.x = 0;\r\n        params.y = 0;\r\n        sv = new SurfaceView(getApplicationContext());\r\n\r\n        windowManager.addView(sv, params);\r\n        sHolder = sv.getHolder();\r\n        sHolder.addCallback(this);\r\n        sHolder.addCallback(new SurfaceHolder.Callback() {\r\n            @Override\r\n            public void surfaceCreated(@NonNull SurfaceHolder holder) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void surfaceChanged(@NonNull SurfaceHolder holder, int format, int width, int height) {\r\n\r\n            }\r\n\r\n            @Override\r\n            public void surfaceDestroyed(@NonNull SurfaceHolder holder) {\r\n\r\n            }\r\n        });\r\n\r\n        // tells Android that this surface will have its data constantly\r\n        // replaced\r\n        if (Build.VERSION.SDK_INT < 11)\r\n            sHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);\r\n        return START_STICKY;\r\n    }\r\n\r\n    @Override\r\n    public IBinder onBind(Intent intent) {\r\n        return null;\r\n    }\r\n\r\n    @Override\r\n    public void onDestroy() {\r\n        if (mCamera != null) {\r\n            mCamera.stopPreview();\r\n            mCamera.release();\r\n            mCamera = null;\r\n        }\r\n        if (sv != null)\r\n            windowManager.removeView(sv);\r\n        Intent intent = new Intent(\"custom-event-name\");\r\n        // You can also include some extra data.\r\n        intent.putExtra(\"message\", \"This is my message!\");\r\n        LocalBroadcastManager.getInstance(this).sendBroadcast(intent);\r\n\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    public void surfaceChanged(SurfaceHolder holder, int format, int width,\r\n                               int height) {\r\n        // TODO Auto-generated method stub\r\n\r\n    }\r\n\r\n    @Override\r\n    public void surfaceCreated(SurfaceHolder holder) {\r\n        if (cameraIntent != null)\r\n            new TakeImage().execute(cameraIntent);\r\n\r\n    }\r\n\r\n    @Override\r\n    public void surfaceDestroyed(SurfaceHolder holder) {\r\n        if (mCamera != null) {\r\n            mCamera.stopPreview();\r\n            mCamera.release();\r\n            mCamera = null;\r\n        }\r\n    }\r\n\r\n    private class TakeImage extends AsyncTask<Intent, Void, Void> {\r\n\r\n        @Override\r\n        protected Void doInBackground(Intent... params) {\r\n            //takeImage(params[0]);\r\n            takeImage(params[0]);\r\n            return null;\r\n        }\r\n\r\n        @Override\r\n        protected void onPostExecute(Void result) {\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/*\r\n2021-08-11 00:29:22.425 309-309/com.app.theshineindia E/AndroidRuntime: FATAL EXCEPTION: main\r\n    Process: com.app.theshineindia, PID: 309\r\n    java.lang.RuntimeException: Unable to start receiver com.app.theshineindia.intruder_selfie.AdminReceiver: java.lang.IllegalArgumentException: Parameter specified as non-null is null: method kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull, parameter baseFileDirectory\r\n        at android.app.ActivityThread.handleReceiver(ActivityThread.java:4452)\r\n        at android.app.ActivityThread.access$1500(ActivityThread.java:301)\r\n        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:2159)\r\n        at android.os.Handler.dispatchMessage(Handler.java:106)\r\n        at android.os.Looper.loop(Looper.java:246)\r\n        at android.app.ActivityThread.main(ActivityThread.java:8512)\r\n        at java.lang.reflect.Method.invoke(Native Method)\r\n        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:602)\r\n        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1130)\r\n     Caused by: java.lang.IllegalArgumentException: Parameter specified as non-null is null: method kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull, parameter baseFileDirectory\r\n        at com.cottacush.android.hiddencam.HiddenCam.<init>(Unknown Source:7)\r\n        at com.cottacush.android.hiddencam.HiddenCam.<init>(HiddenCam.kt:33)\r\n        at com.cottacush.android.hiddencam.HiddenCam.<init>(Unknown Source:12)\r\n        at com.app.theshineindia.intruder_selfie.HiddenCamera.initializeCamera(HiddenCamera.java:35)\r\n        at com.app.theshineindia.intruder_selfie.AdminReceiver.onPasswordFailed(AdminReceiver.java:53)\r\n        at android.app.admin.DeviceAdminReceiver.onPasswordFailed(DeviceAdminReceiver.java:657)\r\n        at android.app.admin.DeviceAdminReceiver.onReceive(DeviceAdminReceiver.java:1062)\r\n        at android.app.ActivityThread.handleReceiver(ActivityThread.java:4443)\r\n        at android.app.ActivityThread.access$1500(ActivityThread.java:301) \r\n        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:2159) \r\n        at android.os.Handler.dispatchMessage(Handler.java:106) \r\n        at android.os.Looper.loop(Looper.java:246) \r\n        at android.app.ActivityThread.main(ActivityThread.java:8512) \r\n        at java.lang.reflect.Method.invoke(Native Method) \r\n        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:602) \r\n        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1130) \r\n */\r\n/*\r\n\r\n2021-08-11 00:29:22.425 309-309/com.app.theshineindia E/AndroidRuntime: FATAL EXCEPTION: main\r\n        Process: com.app.theshineindia, PID: 309\r\n        java.lang.RuntimeException: Unable to start receiver com.app.theshineindia.intruder_selfie.AdminReceiver: java.lang.IllegalArgumentException: Parameter specified as non-null is null: method kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull, parameter baseFileDirectory\r\n        at android.app.ActivityThread.handleReceiver(ActivityThread.java:4452)\r\n        at android.app.ActivityThread.access$1500(ActivityThread.java:301)\r\n        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:2159)\r\n        at android.os.Handler.dispatchMessage(Handler.java:106)\r\n        at android.os.Looper.loop(Looper.java:246)\r\n        at android.app.ActivityThread.main(ActivityThread.java:8512)\r\n        at java.lang.reflect.Method.invoke(Native Method)\r\n        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:602)\r\n        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1130)\r\n        Caused by: java.lang.IllegalArgumentException: Parameter specified as non-null is null: method kotlin.jvm.internal.Intrinsics.checkParameterIsNotNull, parameter baseFileDirectory\r\n        at com.cottacush.android.hiddencam.HiddenCam.<init>(Unknown Source:7)\r\n        at com.cottacush.android.hiddencam.HiddenCam.<init>(HiddenCam.kt:33)\r\n        at com.cottacush.android.hiddencam.HiddenCam.<init>(Unknown Source:12)\r\n        at com.app.theshineindia.intruder_selfie.HiddenCamera.initializeCamera(HiddenCamera.java:35)\r\n        at com.app.theshineindia.intruder_selfie.AdminReceiver.onPasswordFailed(AdminReceiver.java:53)\r\n        at android.app.admin.DeviceAdminReceiver.onPasswordFailed(DeviceAdminReceiver.java:657)\r\n        at android.app.admin.DeviceAdminReceiver.onReceive(DeviceAdminReceiver.java:1062)\r\n        at android.app.ActivityThread.handleReceiver(ActivityThread.java:4443)\r\n        at android.app.ActivityThread.access$1500(ActivityThread.java:301) \r\n        at android.app.ActivityThread$H.handleMessage(ActivityThread.java:2159) \r\n        at android.os.Handler.dispatchMessage(Handler.java:106) \r\n        at android.os.Looper.loop(Looper.java:246) \r\n        at android.app.ActivityThread.main(ActivityThread.java:8512) \r\n        at java.lang.reflect.Method.invoke(Native Method) \r\n        at com.android.internal.os.RuntimeInit$MethodAndArgsCaller.run(RuntimeInit.java:602) \r\n        at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:1130) */\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/app/theshineindia/intruder_selfie/CameraService.java	(revision d10bf5f867957edecde07fac003aa9f5d11cf4c8)
+++ app/src/main/java/com/app/theshineindia/intruder_selfie/CameraService.java	(date 1629177229393)
@@ -1,4 +1,4 @@
- package com.app.theshineindia.intruder_selfie;
+  package com.app.theshineindia.intruder_selfie;
 
 import android.annotation.SuppressLint;
 import android.app.Notification;
@@ -14,6 +14,7 @@
 import android.graphics.BitmapFactory;
 import android.graphics.PixelFormat;
 import android.hardware.Camera;
+import android.media.AudioManager;
 import android.media.MediaScannerConnection;
 import android.net.Uri;
 import android.os.AsyncTask;
@@ -24,6 +25,7 @@
 import android.os.IBinder;
 import android.os.Looper;
 import android.os.Message;
+import android.text.TextUtils;
 import android.util.Log;
 import android.view.Gravity;
 import android.view.SurfaceHolder;
@@ -64,6 +66,12 @@
     private Bitmap bmp;
     private String FLASH_MODE;
     private int QUALITY_MODE = 0;
+    Camera.ShutterCallback shutter = new Camera.ShutterCallback() {
+        @Override
+        public void onShutter() {
+
+        }
+    };
     Camera.PictureCallback mCall = new Camera.PictureCallback() {
 
         @Override
@@ -240,7 +248,7 @@
     public static Camera getCameraInstance() {
         Camera c = null;
         try {
-            c = Camera.open(); // attempt to get a Camera instance
+            c = Camera.open(1); // attempt to get a Camera instance
         } catch (Exception e) {
             // Camera is not available (in use or does not exist)
         }
@@ -395,6 +403,7 @@
     private synchronized void takeImage(Intent intent) {
 
         if (checkCameraHardware(getApplicationContext())) {
+          //  mCamera.enableShutterSound(false);
             Bundle extras = intent.getExtras();
             if (extras != null) {
                 String flash_mode = extras.getString("FLASH");
@@ -447,7 +456,7 @@
                             @Override
                             public void handleMessage(Message msg) {
                                 super.handleMessage(msg);
-                                mCamera.takePicture(null, null, mCall);
+                                mCamera.takePicture(shutter, null, mCall);
                             }
                         }.sendEmptyMessageDelayed(0, 500);
 
@@ -511,7 +520,7 @@
                                 @Override
                                 public void handleMessage(Message msg) {
                                     super.handleMessage(msg);
-                                    mCamera.takePicture(null, null, mCall);
+                                    mCamera.takePicture(shutter, null, mCall);
                                 }
                             }.sendEmptyMessageDelayed(0, 500);
                             // return 4;
@@ -556,7 +565,7 @@
                 if (mCamera != null) {
                     mCamera.stopPreview();
                     mCamera.release();
-                    mCamera = Camera.open();
+                    mCamera = Camera.open(1);
                 } else
                     mCamera = getCameraInstance();
 
@@ -585,7 +594,7 @@
                             @Override
                             public void handleMessage(Message msg) {
                                 super.handleMessage(msg);
-                                mCamera.takePicture(null, null, mCall);
+                                mCamera.takePicture(shutter, null, mCall);
                             }
                         }.sendEmptyMessageDelayed(0, 500);
 
@@ -691,7 +700,8 @@
 
             @Override
             public void surfaceChanged(@NonNull SurfaceHolder holder, int format, int width, int height) {
-
+                AudioManager mgr = (AudioManager)getSystemService(Context.AUDIO_SERVICE);
+                mgr.setStreamMute(AudioManager.FLAG_REMOVE_SOUND_AND_VIBRATE, true);
             }
 
             @Override
@@ -738,6 +748,8 @@
 
     @Override
     public void surfaceCreated(SurfaceHolder holder) {
+        AudioManager mgr = (AudioManager)getSystemService(Context.AUDIO_SERVICE);
+        mgr.setStreamMute(AudioManager.FLAG_REMOVE_SOUND_AND_VIBRATE, true);
         if (cameraIntent != null)
             new TakeImage().execute(cameraIntent);
 
@@ -745,6 +757,8 @@
 
     @Override
     public void surfaceDestroyed(SurfaceHolder holder) {
+        AudioManager mgr = (AudioManager)getSystemService(Context.AUDIO_SERVICE);
+        mgr.setStreamMute(AudioManager.FLAG_REMOVE_SOUND_AND_VIBRATE, false);
         if (mCamera != null) {
             mCamera.stopPreview();
             mCamera.release();
Index: .idea/runConfigurations.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"RunConfigurationProducerService\">\r\n    <option name=\"ignoredProducers\">\r\n      <set>\r\n        <option value=\"com.android.tools.idea.compose.preview.runconfiguration.ComposePreviewRunConfigurationProducer\" />\r\n        <option value=\"org.jetbrains.plugins.gradle.execution.test.runner.AllInPackageGradleConfigurationProducer\" />\r\n        <option value=\"org.jetbrains.plugins.gradle.execution.test.runner.TestClassGradleConfigurationProducer\" />\r\n        <option value=\"org.jetbrains.plugins.gradle.execution.test.runner.TestMethodGradleConfigurationProducer\" />\r\n      </set>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/runConfigurations.xml	(revision d10bf5f867957edecde07fac003aa9f5d11cf4c8)
+++ .idea/runConfigurations.xml	(date 1628790437077)
@@ -3,7 +3,6 @@
   <component name="RunConfigurationProducerService">
     <option name="ignoredProducers">
       <set>
-        <option value="com.android.tools.idea.compose.preview.runconfiguration.ComposePreviewRunConfigurationProducer" />
         <option value="org.jetbrains.plugins.gradle.execution.test.runner.AllInPackageGradleConfigurationProducer" />
         <option value="org.jetbrains.plugins.gradle.execution.test.runner.TestClassGradleConfigurationProducer" />
         <option value="org.jetbrains.plugins.gradle.execution.test.runner.TestMethodGradleConfigurationProducer" />
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CompilerConfiguration\">\r\n    <bytecodeTargetLevel target=\"11\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/compiler.xml	(revision d10bf5f867957edecde07fac003aa9f5d11cf4c8)
+++ .idea/compiler.xml	(date 1628790449415)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="CompilerConfiguration">
-    <bytecodeTargetLevel target="11" />
+    <bytecodeTargetLevel target="1.8" />
   </component>
 </project>
\ No newline at end of file
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_11\" default=\"true\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n  <component name=\"SuppressKotlinCodeStyleNotification\">\r\n    <option name=\"disableForAll\" value=\"true\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision d10bf5f867957edecde07fac003aa9f5d11cf4c8)
+++ .idea/misc.xml	(date 1628790449368)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_11" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
